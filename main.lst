


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: ***Your Names**update this***
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/4/2017
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external9 LED on proto
                       board)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal) 
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 0007A120 
                       initial EQU              0x7A120     ;16000 for 1ms when
                                                             P = 3
   42 00000000         
   43 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   44 00000000                 IMPORT           TExaS_Init
   45 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   46 00000000                 THUMB
   47 00000000                 EXPORT           Start
   48 00000000         Start
   49 00000000         ; TExaS_Init sets bus clock at 80 MHz
   50 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   51 00000004 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
   52 00000006 4864            LDR              R0,=SYSCTL_RCGCGPIO_R 
                                                            ;enable the clock
   53 00000008 6801            LDR              R1,[R0]
   54 0000000A F041 0130       ORR              R1,#0x30
   55 0000000E 6001            STR              R1,[R0]
   56 00000010 BF00            NOP
   57 00000012 BF00            NOP
   58 00000014 BF00            NOP
   59 00000016 BF00            NOP
   60 00000018 4860            LDR              R0,=GPIO_PORTE_DIR_R 
                                                            ;enable direction
   61 0000001A 6802            LDR              R2,[R0]
   62 0000001C F04F 0101       MOV              R1,#0x01    ;ports E0 and F4 ar
                                                            e outputs
   63 00000020 EA42 0201       ORR              R2,R1
   64 00000024 F06F 0102       MOV              R1,#0xFFFFFFFD
   65 00000028 EA02 0201       AND              R2,R1
   66 0000002C 6002            STR              R2,[R0]
   67 0000002E 485C            LDR              R0,=GPIO_PORTF_DIR_R
   68 00000030 6801            LDR              R1,[R0]
   69 00000032 F640 72EF       MOV              R2,#0xFEF
   70 00000036 EA01 0102       AND              R1,R2



ARM Macro Assembler    Page 3 


   71 0000003A 6001            STR              R1,[R0]
   72 0000003C 4859            LDR              R0,=GPIO_PORTF_PUR_R ;enable pu
                                                            ll up resistors for
                                                             PF4
   73 0000003E 6801            LDR              R1,[R0]
   74 00000040 F04F 0210       MOV              R2,#0x010
   75 00000044 EA41 0102       ORR              R1,R2
   76 00000048 6001            STR              R1,[R0]
   77 0000004A 4857            LDR              R0,=GPIO_PORTF_DEN_R ;enable da
                                                            ta for port PF4
   78 0000004C 6801            LDR              R1,[R0]
   79 0000004E F04F 0210       MOV              R2,#0x010
   80 00000052 EA41 0102       ORR              R1,R2
   81 00000056 6001            STR              R1,[R0]
   82 00000058 4854            LDR              R0,=GPIO_PORTE_DEN_R ;enable da
                                                            ta for PE0 and PE1
   83 0000005A 6801            LDR              R1,[R0]
   84 0000005C F04F 02FF       MOV              R2,#0xFF
   85 00000060 EA41 0102       ORR              R1,R2
   86 00000064 6001            STR              R1,[R0]
   87 00000066 4852            LDR              R0,=GPIO_PORTF_AFSEL_R 
                                                            ;clears AFSEL
   88 00000068 F04F 0100       MOV              R1,#0x0
   89 0000006C 6001            STR              R1,[R0]
   90 0000006E 4851            LDR              R0,=GPIO_PORTE_AFSEL_R 
                                                            ;clears AFSEL
   91 00000070 F04F 0100       MOV              R1,#0x0
   92 00000074 6001            STR              R1,[R0]
   93 00000076 F04F 0401       MOV              R4, #1
   94 0000007A F04F 0700       MOV              R7, #0
   95 0000007E F04F 0100       MOV              R1,#0
   96 00000082 4A4D            LDR              R2,=wasPushed
   97 00000084 6011            STR              R1,[R2]
   98 00000086         loop2
   99 00000086 484D            LDR              R0, =GPIO_PORTF_DATA_R
  100 00000088 6801            LDR              R1, [R0]
  101 0000008A F011 0110       ANDS             R1, R1, #0x10 ; Isolate PF4
  102 0000008E D045            BEQ              Breathe
  103 00000090         ;Main Routine****************************************** 
                       
  104 00000090 494B            LDR              R1, =GPIO_PORTE_DATA_R
  105 00000092 6808            LDR              R0, [R1]
  106 00000094 F010 0002       ANDS             R0, R0, #0x2
  107 00000098 D003            BEQ              skip
  108 0000009A 1C3F            ADDS             R7, R7, #0
  109 0000009C         ; LDR R1, =wasPushed
  110 0000009C         ; LDR R0, [R1]
  111 0000009C         ; ADD R0, R0, #0
  112 0000009C D101            BNE              skip
  113 0000009E F04F 0701       MOV              R7, #1
  114 000000A2         ; MOV R0, #1
  115 000000A2         ; STR R0, [R1]
  116 000000A2         skip
  117 000000A2 F04F 0205       MOV              R2, #5
  118 000000A6 EBA2 0204       SUB              R2, R2, R4
  119 000000AA F04F 0119       MOV              R1, #25
  120 000000AE FB02 F601       MUL              R6, R2, R1
  121 000000B2 F000 F827       BL               DelaySubroutine
  122 000000B6 4842            LDR              R0, =GPIO_PORTE_DATA_R



ARM Macro Assembler    Page 4 


  123 000000B8 6802            LDR              R2,[R0]     ;load data into R2
  124 000000BA F04F 0301       MOV              R3,#0x01
  125 000000BE EA22 0203       BIC              R2,R3
  126 000000C2 EA42 0203       ORR              R2,R3
  127 000000C6 6002            STR              R2,[R0]     ; Turns on the LED
  128 000000C8         
  129 000000C8 F04F 0119       MOV              R1, #25
  130 000000CC FB04 F601       MUL              R6, R4, R1
  131 000000D0 F000 F818       BL               DelaySubroutine
  132 000000D4 6802            LDR              R2,[R0]     ;load data into R2
  133 000000D6 F640 71FE       MOV              R1,#0xFFE
  134 000000DA EA02 0201       AND              R2,R1
  135 000000DE 6002            STR              R2,[R0]
  136 000000E0         ;Check if button has been pushed and if it has then chec
                       k if it has been released
  137 000000E0         ; LDR R1, =wasPushed
  138 000000E0         ; LDR R0, [R1]
  139 000000E0         ; ADD R0, R0, #0
  140 000000E0 1C3F            ADDS             R7, R7, #0
  141 000000E2 D0D0            BEQ              loop2
  142 000000E4 4936            LDR              R1, =GPIO_PORTE_DATA_R
  143 000000E6 6808            LDR              R0, [R1]
  144 000000E8 F010 0002       ANDS             R0, R0, #0x2
  145 000000EC D1CB            BNE              loop2
  146 000000EE         ; LDR R1, =wasPushed
  147 000000EE         ; MOV R0, #0
  148 000000EE         ; STR R0, [R1]
  149 000000EE F007 0700       AND              R7, R7, #0
  150 000000F2 F104 0401       ADD              R4, R4, #1
  151 000000F6 F04F 0106       MOV              R1, #6
  152 000000FA 1B0D            SUBS             R5, R1, R4
  153 000000FC D1C3            BNE              loop2
  154 000000FE F004 0400       AND              R4, R4, #0
  155 00000102 E7C0            B                loop2
  156 00000104         
  157 00000104         ;*******************************************************
                       ************************
  158 00000104         ;Delay subroutine, punt number of ms to delay in R6, use
                       s R6 and R9
  159 00000104         DelaySubroutine
  160 00000104 3600            ADDS             R6,#0
  161 00000106 D100            BNE              delaySkip
  162 00000108 4770            BX               LR
  163 0000010A         delaySkip
  164 0000010A 3E01            SUBS             R6,#1
  165 0000010C         delayLoop1
  166 0000010C F44F 597A       MOV              R9,#16000
  167 00000110         delayLoop2
  168 00000110 F1B9 0901       SUBS             R9,#1
  169 00000114 D1FC            BNE              delayLoop2
  170 00000116 1E76            SUBS             R6,R6,#1
  171 00000118 D1F8            BNE              delayLoop1
  172 0000011A 4770            BX               LR
  173 0000011C         ;*******************************************************
                       **********************************
  174 0000011C         ;Breating subroutine
  175 0000011C         Breathe
  176 0000011C 4828            LDR              R0,=GPIO_PORTE_DATA_R ;R0 has a
                                                            ddress of port e da



ARM Macro Assembler    Page 5 


                                                            ta
  177 0000011E F04F 0164       MOV              R1,#100     ;R1 has the ammount
                                                             of time for the On
                                                             delay
  178 00000122 F04F 0200       MOV              R2,#0       ;R2 has the ammount
                                                             of time for the Of
                                                            f delay
  179 00000126 F04F 0300       MOV              R3,#0       ;R3 has 0 if the on
                                                             time should be dec
                                                            reasing and 1 if on
                                                             time should be inc
                                                            reasing
  180 0000012A         ;delay 1, on delay 
  181 0000012A 460E            MOV              R6,R1
  182 0000012C F000 F824       BL               BreatheDelay
  183 00000130 6805            LDR              R5,[R0]     ;load data into R5
  184 00000132 F04F 0301       MOV              R3,#0x01
  185 00000136 EA25 0503       BIC              R5,R3
  186 0000013A EA45 0503       ORR              R5,R3
  187 0000013E 6005            STR              R5,[R0]
  188 00000140         ;delay 2, off delay
  189 00000140 4616            MOV              R6,R2
  190 00000142 F000 F819       BL               BreatheDelay
  191 00000146 6805            LDR              R5,[R0]     ;load datat into R5
                                                            
  192 00000148 F640 73FE       MOV              R3,#0xFFE
  193 0000014C EA05 0503       AND              R5,R3
  194 00000150 6005            STR              R5,[R0]
  195 00000152         ;check to see if on time should be increasing of decreas
                       ing and change R3 accorsingly
  196 00000152 2A00            CMP              R2,#0
  197 00000154 D101            BNE              BrtSkip1
  198 00000156 F04F 0300       MOV              R3,#0
  199 0000015A         BrtSkip1
  200 0000015A 2900            CMP              R1,#0
  201 0000015C D101            BNE              BrtSkip2
  202 0000015E F04F 0301       MOV              R3,#1
  203 00000162         BrtSkip2
  204 00000162         ;check R3 to see if R1 or R2 should increase
  205 00000162 3300            ADDS             R3,#0
  206 00000164 D103            BNE              IncOnTime
  207 00000166 F102 0201       ADD              R2,#1
  208 0000016A F1A1 0101       SUB              R1,#1
  209 0000016E         IncOnTime
  210 0000016E F101 0101       ADD              R1,#1
  211 00000172 F1A2 0201       SUB              R2,#1
  212 00000176 E786            B                loop2
  213 00000178         
  214 00000178         
  215 00000178         
  216 00000178         
  217 00000178         ;for later, make a register you use to determine if you 
                       are adding to the on or off register (R5), make a way to
                        flip that determining register from a 1 or 0
  218 00000178         ;make a loop that subtracts from R1 and adds to R2 if R5
                        is 1 or 0 and visa versa
  219 00000178         
  220 00000178         
  221 00000178         ;*******************************************************



ARM Macro Assembler    Page 6 


                       **********************
  222 00000178         ;Breathing DelaySubroutine, delays R6*something seconds,
                        uses R6 and R9
  223 00000178         BreatheDelay
  224 00000178 3600            ADDS             R6,#0
  225 0000017A D100            BNE              BDelaySkip
  226 0000017C 4770            BX               LR
  227 0000017E         BDelaySkip
  228 0000017E 3E01            SUBS             R6,#1
  229 00000180         BDelayLoop1
  230 00000180 F04F 09A0       MOV              R9,#160
  231 00000184         BDelayLoop2
  232 00000184 F1B9 0901       SUBS             R9,#1
  233 00000188 D1FC            BNE              BDelayLoop2
  234 0000018A 1E76            SUBS             R6,R6,#1
  235 0000018C D1F8            BNE              BDelayLoop1
  236 0000018E 4770            BX               LR
  237 00000190         
  238 00000190         
  239 00000190 00 00 00 
              00       wasPushed
                               SPACE            4
  240 00000194         
  241 00000194         loop
  242 00000194         
  243 00000194 E7FE            B                loop
  244 00000196         
  245 00000196         
  246 00000196 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  247 00000198                 END                          ; end of file
              400FE608 
              40024400 
              40025400 
              40025510 
              4002551C 
              4002451C 
              40025420 
              40024420 
              00000000 
              400253FC 
              400243FC 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 45 in file main.s
   Uses
      None
Comment: .text unused
BDelayLoop1 00000180

Symbol: BDelayLoop1
   Definitions
      At line 229 in file main.s
   Uses
      At line 235 in file main.s
Comment: BDelayLoop1 used once
BDelayLoop2 00000184

Symbol: BDelayLoop2
   Definitions
      At line 231 in file main.s
   Uses
      At line 233 in file main.s
Comment: BDelayLoop2 used once
BDelaySkip 0000017E

Symbol: BDelaySkip
   Definitions
      At line 227 in file main.s
   Uses
      At line 225 in file main.s
Comment: BDelaySkip used once
Breathe 0000011C

Symbol: Breathe
   Definitions
      At line 175 in file main.s
   Uses
      At line 102 in file main.s
Comment: Breathe used once
BreatheDelay 00000178

Symbol: BreatheDelay
   Definitions
      At line 223 in file main.s
   Uses
      At line 182 in file main.s
      At line 190 in file main.s

BrtSkip1 0000015A

Symbol: BrtSkip1
   Definitions
      At line 199 in file main.s
   Uses
      At line 197 in file main.s
Comment: BrtSkip1 used once
BrtSkip2 00000162




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: BrtSkip2
   Definitions
      At line 203 in file main.s
   Uses
      At line 201 in file main.s
Comment: BrtSkip2 used once
DelaySubroutine 00000104

Symbol: DelaySubroutine
   Definitions
      At line 159 in file main.s
   Uses
      At line 121 in file main.s
      At line 131 in file main.s

IncOnTime 0000016E

Symbol: IncOnTime
   Definitions
      At line 209 in file main.s
   Uses
      At line 206 in file main.s
Comment: IncOnTime used once
Start 00000000

Symbol: Start
   Definitions
      At line 48 in file main.s
   Uses
      At line 47 in file main.s
Comment: Start used once
delayLoop1 0000010C

Symbol: delayLoop1
   Definitions
      At line 165 in file main.s
   Uses
      At line 171 in file main.s
Comment: delayLoop1 used once
delayLoop2 00000110

Symbol: delayLoop2
   Definitions
      At line 167 in file main.s
   Uses
      At line 169 in file main.s
Comment: delayLoop2 used once
delaySkip 0000010A

Symbol: delaySkip
   Definitions
      At line 163 in file main.s
   Uses
      At line 161 in file main.s
Comment: delaySkip used once
loop 00000194

Symbol: loop
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 241 in file main.s
   Uses
      At line 243 in file main.s
Comment: loop used once
loop2 00000086

Symbol: loop2
   Definitions
      At line 98 in file main.s
   Uses
      At line 141 in file main.s
      At line 145 in file main.s
      At line 153 in file main.s
      At line 155 in file main.s
      At line 212 in file main.s

skip 000000A2

Symbol: skip
   Definitions
      At line 116 in file main.s
   Uses
      At line 107 in file main.s
      At line 112 in file main.s

wasPushed 00000190

Symbol: wasPushed
   Definitions
      At line 239 in file main.s
   Uses
      At line 96 in file main.s
Comment: wasPushed used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 90 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 104 in file main.s
      At line 122 in file main.s
      At line 142 in file main.s
      At line 176 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 82 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 60 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 87 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 99 in file main.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 77 in file main.s
Comment: GPIO_PORTF_DEN_R used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 67 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 72 in file main.s
Comment: GPIO_PORTF_PUR_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 43 in file main.s
   Uses
      At line 52 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
initial 0007A120

Symbol: initial
   Definitions
      At line 41 in file main.s
   Uses
      None
Comment: initial unused
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 44 in file main.s
   Uses
      At line 50 in file main.s
Comment: TExaS_Init used once
1 symbol
363 symbols in table
