


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: ***Your Names**update this***
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/4/2017
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external9 LED on proto
                       board)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal) 
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 0007A120 
                       initial EQU              0x7A120     ;16000 for 1ms when
                                                             P = 3
   42 00000000         
   43 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   44 00000000                 IMPORT           TExaS_Init
   45 00000000                 AREA             DATA, ALIGN=2
   46 00000000                 EXPORT           onTime [DATA,SIZE=4]
   47 00000000                 EXPORT           offTime [DATA,SIZE=4]
   48 00000000                 EXPORT           breatheSetup [DATA,SIZE=4]
   49 00000000 00 00 00 
              00       onTime  SPACE            4
   50 00000004 00 00 00 
              00       offTime SPACE            4
   51 00000008 00 00 00 
              00       breatheSetup
                               SPACE            4
   52 0000000C                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   53 00000000                 THUMB
   54 00000000                 EXPORT           Start
   55 00000000         Start
   56 00000000         ; TExaS_Init sets bus clock at 80 MHz
   57 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   58 00000004 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
   59 00000006 4876            LDR              R0,=SYSCTL_RCGCGPIO_R 
                                                            ;enable the clock
   60 00000008 6801            LDR              R1,[R0]
   61 0000000A F041 0130       ORR              R1,#0x30
   62 0000000E 6001            STR              R1,[R0]
   63 00000010 BF00            NOP
   64 00000012 BF00            NOP
   65 00000014 BF00            NOP
   66 00000016 BF00            NOP
   67 00000018 4872            LDR              R0,=GPIO_PORTE_DIR_R 
                                                            ;enable direction



ARM Macro Assembler    Page 3 


   68 0000001A 6802            LDR              R2,[R0]
   69 0000001C F04F 0101       MOV              R1,#0x01    ;ports E0 and F4 ar
                                                            e outputs
   70 00000020 EA42 0201       ORR              R2,R1
   71 00000024 F06F 0102       MOV              R1,#0xFFFFFFFD
   72 00000028 EA02 0201       AND              R2,R1
   73 0000002C 6002            STR              R2,[R0]
   74 0000002E 486E            LDR              R0,=GPIO_PORTF_DIR_R
   75 00000030 6801            LDR              R1,[R0]
   76 00000032 F640 72EF       MOV              R2,#0xFEF
   77 00000036 EA01 0102       AND              R1,R2
   78 0000003A 6001            STR              R1,[R0]
   79 0000003C 486B            LDR              R0,=GPIO_PORTF_PUR_R ;enable pu
                                                            ll up resistors for
                                                             PF4
   80 0000003E 6801            LDR              R1,[R0]
   81 00000040 F04F 0210       MOV              R2,#0x010
   82 00000044 EA41 0102       ORR              R1,R2
   83 00000048 6001            STR              R1,[R0]
   84 0000004A 4869            LDR              R0,=GPIO_PORTF_DEN_R ;enable da
                                                            ta for port PF4
   85 0000004C 6801            LDR              R1,[R0]
   86 0000004E F04F 0210       MOV              R2,#0x010
   87 00000052 EA41 0102       ORR              R1,R2
   88 00000056 6001            STR              R1,[R0]
   89 00000058 4866            LDR              R0,=GPIO_PORTE_DEN_R ;enable da
                                                            ta for PE0 and PE1
   90 0000005A 6801            LDR              R1,[R0]
   91 0000005C F04F 02FF       MOV              R2,#0xFF
   92 00000060 EA41 0102       ORR              R1,R2
   93 00000064 6001            STR              R1,[R0]
   94 00000066 4864            LDR              R0,=GPIO_PORTF_AFSEL_R 
                                                            ;clears AFSEL
   95 00000068 F04F 0100       MOV              R1,#0x0
   96 0000006C 6001            STR              R1,[R0]
   97 0000006E 4863            LDR              R0,=GPIO_PORTE_AFSEL_R 
                                                            ;clears AFSEL
   98 00000070 F04F 0100       MOV              R1,#0x0
   99 00000074 6001            STR              R1,[R0]
  100 00000076 F04F 0401       MOV              R4, #1
  101 0000007A F04F 0700       MOV              R7, #0      ;R7 indicated weath
                                                            er the button PE1 w
                                                            as pushed so that w
                                                            e can increment on 
                                                            time when button is
                                                             released
  102 0000007E 4960            LDR              R1,=breatheSetup
  103 00000080 F04F 0201       MOV              R2,#1
  104 00000084 600A            STR              R2,[R1]
  105 00000086         
  106 00000086         
  107 00000086         loop2
  108 00000086 485F            LDR              R0, =GPIO_PORTF_DATA_R
  109 00000088 6801            LDR              R1, [R0]
  110 0000008A F011 0110       ANDS             R1, R1, #0x10 ; Isolate PF4
  111 0000008E D049            BEQ              Breathe
  112 00000090 495B            LDR              R1,=breatheSetup ;If we don't g
                                                            o toe breathe we ne
                                                            ed to do the set up



ARM Macro Assembler    Page 4 


                                                             for the subroutine
                                                             again
  113 00000092 F04F 0201       MOV              R2,#1
  114 00000096 600A            STR              R2,[R1]
  115 00000098         ;Main Routine****************************************** 
                       
  116 00000098 495B            LDR              R1, =GPIO_PORTE_DATA_R
  117 0000009A 6808            LDR              R0, [R1]
  118 0000009C F010 0002       ANDS             R0, R0, #0x2
  119 000000A0 D003            BEQ              skip
  120 000000A2 1C3F            ADDS             R7, R7, #0
  121 000000A4         ; LDR R1, =wasPushed
  122 000000A4         ; LDR R0, [R1]
  123 000000A4         ; ADD R0, R0, #0
  124 000000A4 D101            BNE              skip
  125 000000A6 F04F 0701       MOV              R7, #1
  126 000000AA         ; MOV R0, #1
  127 000000AA         ; STR R0, [R1]
  128 000000AA         skip
  129 000000AA F04F 0205       MOV              R2, #5
  130 000000AE EBA2 0204       SUB              R2, R2, R4
  131 000000B2 F04F 0119       MOV              R1, #25
  132 000000B6 FB02 F601       MUL              R6, R2, R1
  133 000000BA F000 F827       BL               DelaySubroutine
  134 000000BE 4852            LDR              R0, =GPIO_PORTE_DATA_R
  135 000000C0 6802            LDR              R2,[R0]     ;load data into R2
  136 000000C2 F04F 0301       MOV              R3,#0x01
  137 000000C6 EA22 0203       BIC              R2,R3
  138 000000CA EA42 0203       ORR              R2,R3
  139 000000CE 6002            STR              R2,[R0]     ; Turns on the LED
  140 000000D0         
  141 000000D0 F04F 0119       MOV              R1, #25
  142 000000D4 FB04 F601       MUL              R6, R4, R1
  143 000000D8 F000 F818       BL               DelaySubroutine
  144 000000DC 6802            LDR              R2,[R0]     ;load data into R2
  145 000000DE F640 71FE       MOV              R1,#0xFFE
  146 000000E2 EA02 0201       AND              R2,R1
  147 000000E6 6002            STR              R2,[R0]
  148 000000E8         ;Check if button has been pushed and if it has then chec
                       k if it has been released
  149 000000E8         ; LDR R1, =wasPushed
  150 000000E8         ; LDR R0, [R1]
  151 000000E8         ; ADD R0, R0, #0
  152 000000E8 1C3F            ADDS             R7, R7, #0
  153 000000EA D0CC            BEQ              loop2
  154 000000EC 4946            LDR              R1, =GPIO_PORTE_DATA_R
  155 000000EE 6808            LDR              R0, [R1]
  156 000000F0 F010 0002       ANDS             R0, R0, #0x2
  157 000000F4 D1C7            BNE              loop2
  158 000000F6         ; LDR R1, =wasPushed
  159 000000F6         ; MOV R0, #0
  160 000000F6         ; STR R0, [R1]
  161 000000F6 F007 0700       AND              R7, R7, #0
  162 000000FA F104 0401       ADD              R4, R4, #1
  163 000000FE F04F 0106       MOV              R1, #6
  164 00000102 1B0D            SUBS             R5, R1, R4
  165 00000104 D1BF            BNE              loop2
  166 00000106 F004 0400       AND              R4, R4, #0
  167 0000010A E7BC            B                loop2



ARM Macro Assembler    Page 5 


  168 0000010C         
  169 0000010C         ;*******************************************************
                       ************************
  170 0000010C         ;Delay subroutine, punt number of ms to delay in R6, use
                       s R6 and R9
  171 0000010C         DelaySubroutine
  172 0000010C 3600            ADDS             R6,#0
  173 0000010E D100            BNE              delaySkip
  174 00000110 4770            BX               LR
  175 00000112         delaySkip
  176 00000112 3E01            SUBS             R6,#1
  177 00000114         delayLoop1
  178 00000114 F44F 597A       MOV              R9,#16000
  179 00000118         delayLoop2
  180 00000118 F1B9 0901       SUBS             R9,#1
  181 0000011C D1FC            BNE              delayLoop2
  182 0000011E 1E76            SUBS             R6,R6,#1
  183 00000120 D1F8            BNE              delayLoop1
  184 00000122 4770            BX               LR
  185 00000124         ;*******************************************************
                       **********************************
  186 00000124         ;Breating subroutine
  187 00000124         Breathe
  188 00000124         ;Do we need to do set up for Breathe?
  189 00000124 4838            LDR              R0,=GPIO_PORTE_DATA_R ;R0 has a
                                                            ddress of port e da
                                                            ta
  190 00000126 4936            LDR              R1,=breatheSetup
  191 00000128 680A            LDR              R2,[R1]
  192 0000012A 2A00            CMP              R2,#0
  193 0000012C D00D            BEQ              skipBreatheSetup
  194 0000012E 4934            LDR              R1,=breatheSetup ;turn off brea
                                                            theSetup so we don;
                                                            t run it again unle
                                                            ss we go to the oth
                                                            er routine again
  195 00000130 F04F 0200       MOV              R2,#0
  196 00000134 600A            STR              R2,[R1]
  197 00000136 4935            LDR              R1,=onTime  ;onTime has the amm
                                                            ount of time for th
                                                            e On delay
  198 00000138 F04F 0264       MOV              R2,#100
  199 0000013C 600A            STR              R2,[R1]
  200 0000013E 4934            LDR              R1,=offTime ;offTime has the am
                                                            mount of time for t
                                                            he Off delay
  201 00000140 F04F 0200       MOV              R2,#0
  202 00000144 600A            STR              R2,[R1]
  203 00000146 F04F 0A00       MOV              R10,#0      ;R10 has 0 if the o
                                                            n time should be de
                                                            creasing and 1 if o
                                                            n time should be in
                                                            creasing
  204 0000014A         skipBreatheSetup
  205 0000014A         ;delay 1, on delay 
  206 0000014A 6805            LDR              R5,[R0]     ;load data into R5
  207 0000014C F04F 0301       MOV              R3,#0x01
  208 00000150 EA25 0503       BIC              R5,R3
  209 00000154 EA45 0503       ORR              R5,R3



ARM Macro Assembler    Page 6 


  210 00000158 6005            STR              R5,[R0]     ;Turn on LED
  211 0000015A 492C            LDR              R1,=onTime
  212 0000015C 680E            LDR              R6,[R1]
  213 0000015E F000 F82F       BL               BreatheDelay
  214 00000162         ;delay 2, off delay
  215 00000162 6805            LDR              R5,[R0]     ;load datat into R5
                                                            
  216 00000164 F640 73FE       MOV              R3,#0xFFE
  217 00000168 EA05 0503       AND              R5,R3
  218 0000016C 6005            STR              R5,[R0]     ;Turn off LED
  219 0000016E 4928            LDR              R1,=offTime
  220 00000170 680E            LDR              R6,[R1]
  221 00000172 F000 F825       BL               BreatheDelay
  222 00000176         ;check to see if on time should be increasing or decreas
                       ing and change R10 accordingly
  223 00000176 4926            LDR              R1,=offTime
  224 00000178 680A            LDR              R2,[R1]
  225 0000017A 2A00            CMP              R2,#0
  226 0000017C D101            BNE              BrtSkip1
  227 0000017E F04F 0A00       MOV              R10,#0
  228 00000182         BrtSkip1
  229 00000182 4922            LDR              R1,=onTime
  230 00000184 680A            LDR              R2,[R1]
  231 00000186 2A00            CMP              R2,#0
  232 00000188 D101            BNE              BrtSkip2
  233 0000018A F04F 0A01       MOV              R10,#1
  234 0000018E         BrtSkip2
  235 0000018E         ;check R10 to see if onTime or offTime should increase
  236 0000018E F1BA 0F00       CMP              R10,#0
  237 00000192 D10A            BNE              IncOnTime
  238 00000194 491E            LDR              R1,=offTime
  239 00000196 680A            LDR              R2,[R1]
  240 00000198 F102 0201       ADD              R2,#1
  241 0000019C 600A            STR              R2,[R1]
  242 0000019E 491B            LDR              R1,=onTime
  243 000001A0 680A            LDR              R2,[R1]
  244 000001A2 F1A2 0201       SUB              R2,#1
  245 000001A6 600A            STR              R2,[R1]
  246 000001A8 E76D            B                loop2
  247 000001AA         IncOnTime
  248 000001AA 4919            LDR              R1,=offTime
  249 000001AC 680A            LDR              R2,[R1]
  250 000001AE F1A2 0201       SUB              R2,#1
  251 000001B2 600A            STR              R2,[R1]
  252 000001B4 4915            LDR              R1,=onTime
  253 000001B6 680A            LDR              R2,[R1]
  254 000001B8 F102 0201       ADD              R2,#1
  255 000001BC 600A            STR              R2,[R1]
  256 000001BE E762            B                loop2
  257 000001C0         
  258 000001C0         
  259 000001C0         
  260 000001C0         
  261 000001C0         ;for later, make a register you use to determine if you 
                       are adding to the on or off register (R5), make a way to
                        flip that determining register from a 1 or 0
  262 000001C0         ;make a loop that subtracts from R1 and adds to R2 if R5
                        is 1 or 0 and visa versa
  263 000001C0         



ARM Macro Assembler    Page 7 


  264 000001C0         
  265 000001C0         ;*******************************************************
                       **********************
  266 000001C0         ;Breathing DelaySubroutine, delays R6*something seconds,
                        uses R6 and R9
  267 000001C0         BreatheDelay
  268 000001C0 3600            ADDS             R6,#0
  269 000001C2 D100            BNE              BDelaySkip
  270 000001C4 4770            BX               LR
  271 000001C6         BDelaySkip
  272 000001C6 3E01            SUBS             R6,#1
  273 000001C8         BDelayLoop1
  274 000001C8 F04F 09A0       MOV              R9,#160
  275 000001CC         BDelayLoop2
  276 000001CC F1B9 0901       SUBS             R9,#1
  277 000001D0 D1FC            BNE              BDelayLoop2
  278 000001D2 2E00            CMP              R6,#0
  279 000001D4 D001            BEQ              BDelaySkip2
  280 000001D6 1E76            SUBS             R6,R6,#1
  281 000001D8 D1F6            BNE              BDelayLoop1
  282 000001DA         BDelaySkip2
  283 000001DA 4770            BX               LR
  284 000001DC         
  285 000001DC         
  286 000001DC         loop
  287 000001DC         
  288 000001DC E7FE            B                loop
  289 000001DE         
  290 000001DE         
  291 000001DE 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  292 000001E0                 END                          ; end of file
              400FE608 
              40024400 
              40025400 
              40025510 
              4002551C 
              4002451C 
              40025420 
              40024420 
              00000000 
              400253FC 
              400243FC 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 45 in file main.s
   Uses
      None
Comment: DATA unused
breatheSetup 00000008

Symbol: breatheSetup
   Definitions
      At line 51 in file main.s
   Uses
      At line 48 in file main.s
      At line 102 in file main.s
      At line 112 in file main.s
      At line 190 in file main.s
      At line 194 in file main.s

offTime 00000004

Symbol: offTime
   Definitions
      At line 50 in file main.s
   Uses
      At line 47 in file main.s
      At line 200 in file main.s
      At line 219 in file main.s
      At line 223 in file main.s
      At line 238 in file main.s
      At line 248 in file main.s

onTime 00000000

Symbol: onTime
   Definitions
      At line 49 in file main.s
   Uses
      At line 46 in file main.s
      At line 197 in file main.s
      At line 211 in file main.s
      At line 229 in file main.s
      At line 242 in file main.s
      At line 252 in file main.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: .text unused
BDelayLoop1 000001C8

Symbol: BDelayLoop1
   Definitions
      At line 273 in file main.s
   Uses
      At line 281 in file main.s
Comment: BDelayLoop1 used once
BDelayLoop2 000001CC

Symbol: BDelayLoop2
   Definitions
      At line 275 in file main.s
   Uses
      At line 277 in file main.s
Comment: BDelayLoop2 used once
BDelaySkip 000001C6

Symbol: BDelaySkip
   Definitions
      At line 271 in file main.s
   Uses
      At line 269 in file main.s
Comment: BDelaySkip used once
BDelaySkip2 000001DA

Symbol: BDelaySkip2
   Definitions
      At line 282 in file main.s
   Uses
      At line 279 in file main.s
Comment: BDelaySkip2 used once
Breathe 00000124

Symbol: Breathe
   Definitions
      At line 187 in file main.s
   Uses
      At line 111 in file main.s
Comment: Breathe used once
BreatheDelay 000001C0

Symbol: BreatheDelay
   Definitions
      At line 267 in file main.s
   Uses
      At line 213 in file main.s
      At line 221 in file main.s

BrtSkip1 00000182




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: BrtSkip1
   Definitions
      At line 228 in file main.s
   Uses
      At line 226 in file main.s
Comment: BrtSkip1 used once
BrtSkip2 0000018E

Symbol: BrtSkip2
   Definitions
      At line 234 in file main.s
   Uses
      At line 232 in file main.s
Comment: BrtSkip2 used once
DelaySubroutine 0000010C

Symbol: DelaySubroutine
   Definitions
      At line 171 in file main.s
   Uses
      At line 133 in file main.s
      At line 143 in file main.s

IncOnTime 000001AA

Symbol: IncOnTime
   Definitions
      At line 247 in file main.s
   Uses
      At line 237 in file main.s
Comment: IncOnTime used once
Start 00000000

Symbol: Start
   Definitions
      At line 55 in file main.s
   Uses
      At line 54 in file main.s
Comment: Start used once
delayLoop1 00000114

Symbol: delayLoop1
   Definitions
      At line 177 in file main.s
   Uses
      At line 183 in file main.s
Comment: delayLoop1 used once
delayLoop2 00000118

Symbol: delayLoop2
   Definitions
      At line 179 in file main.s
   Uses
      At line 181 in file main.s
Comment: delayLoop2 used once
delaySkip 00000112

Symbol: delaySkip
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 175 in file main.s
   Uses
      At line 173 in file main.s
Comment: delaySkip used once
loop 000001DC

Symbol: loop
   Definitions
      At line 286 in file main.s
   Uses
      At line 288 in file main.s
Comment: loop used once
loop2 00000086

Symbol: loop2
   Definitions
      At line 107 in file main.s
   Uses
      At line 153 in file main.s
      At line 157 in file main.s
      At line 165 in file main.s
      At line 167 in file main.s
      At line 246 in file main.s
      At line 256 in file main.s

skip 000000AA

Symbol: skip
   Definitions
      At line 128 in file main.s
   Uses
      At line 119 in file main.s
      At line 124 in file main.s

skipBreatheSetup 0000014A

Symbol: skipBreatheSetup
   Definitions
      At line 204 in file main.s
   Uses
      At line 193 in file main.s
Comment: skipBreatheSetup used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 97 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 116 in file main.s
      At line 134 in file main.s
      At line 154 in file main.s
      At line 189 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 89 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 67 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 94 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 108 in file main.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 84 in file main.s
Comment: GPIO_PORTF_DEN_R used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 74 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 79 in file main.s
Comment: GPIO_PORTF_PUR_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 43 in file main.s
   Uses
      At line 59 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
initial 0007A120

Symbol: initial
   Definitions
      At line 41 in file main.s
   Uses
      None
Comment: initial unused
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 44 in file main.s
   Uses
      At line 57 in file main.s
Comment: TExaS_Init used once
1 symbol
368 symbols in table
